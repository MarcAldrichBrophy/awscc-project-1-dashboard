[{"/home/marc/Documents/AWS-ACM/awscc-project-1-dashboard/src/app/layout.js":"1","/home/marc/Documents/AWS-ACM/awscc-project-1-dashboard/src/app/page.js":"2"},{"size":376,"mtime":1700160096378,"results":"3","hashOfConfig":"4"},{"size":4184,"mtime":1700160059632,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","suppressedMessages":"8","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"dj6o4i",{"filePath":"9","messages":"10","suppressedMessages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"/home/marc/Documents/AWS-ACM/awscc-project-1-dashboard/src/app/layout.js",[],[],"/home/marc/Documents/AWS-ACM/awscc-project-1-dashboard/src/app/page.js",["13"],[],"'use client';\nimport Image from 'next/image';\nimport styles from './page.module.css';\nimport logo from './images/logo.png';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faDownload } from '@fortawesome/free-solid-svg-icons';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nexport default function Home() {\n  const [tableData, setData] = useState([]);\n\n  useEffect(() => {\n    console.log(\"in eff\")\n    getData();\n  }, []);\n  \n  const getData = async () => {\n    try {\n      const url = 'https://bi5onbo6tl.execute-api.us-west-2.amazonaws.com/prod/s3/all';\n\n      const response = await axios.get(url, {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      console.log(response.data);\n      setData(JSON.parse(response.data)); // Assuming the response is an array of data\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  const generateDataTable = () => {\n    const data = [];\n    for (let i = 1; i <= 15; i++) {\n      data.push({\n        id: i,\n        Key: `Name ${i}`,\n        Type: `Type ${i}`,\n        LastModified: `Date ${i}`,\n        Tags: `Tag ${i}`,\n      });\n    }\n    return data;\n  };\n\n  let dataTable = tableData.length > 0 ? tableData : generateDataTable();\n  return (\n    <main className={styles.main}>\n      <nav className={styles.navbar}>\n        <a className={styles.navImage} href='#'>\n          <Image src={logo} width={103} height={89} />\n          <span className={styles.navTitle}>Extracta</span>\n        </a>\n        <div className={styles.navDiv}></div>\n      </nav>\n      <div style={{ textAlign: 'center' }}>\n        <div className={styles.mainBody}>\n          <div\n            className={`table-responsive ${styles.tableContainer}`}\n            style={{ height: '60vh', overflowY: 'auto' }}\n          >\n            <table\n              className=\"table table-striped table-hover\"\n              style={{ width: '100%', backgroundColor: '#A69CAC !important', borderCollapse: 'collapse', fontSize: '1.2rem' }}\n            >\n              <thead>\n                <tr>\n                  <th className={styles.th} style={{ width: '25%' }}>\n                    Name\n                  </th>\n                  <th className={styles.th} style={{ width: '20%' }}>\n                    Type\n                  </th>\n                  <th className={styles.th} style={{ width: '20%' }}>\n                    Created At\n                  </th>\n                  <th className={styles.th} style={{ width: '25%' }}>\n                    Tags\n                  </th>\n                  <th className={styles.th} style={{ width: '10%' }}>\n                    Download\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                {dataTable.map((row) => (\n                  <tr key={row.id}>\n                    <td className={styles.td} style={{ width: '25%' }}>\n                      {row.Key}\n                    </td>\n                    <td className={styles.td} style={{ width: '20%' }}>\n                      {row.Type}\n                    </td>\n                    <td className={styles.td} style={{ width: '20%' }}>\n                      {row.LastModified}\n                    </td>\n                    <td className={styles.td} style={{ width: '25%' }}>\n                      {\n                      typeof row.Tags === 'string' ? \n                        row.Tags :\n                        row.Tags.map(tag => `${tag.Key}: ${tag.Value}`).join(', ')\n                      }\n                    </td>\n                    <td className={styles.td} style={{ width: '10%' }}>\n                      <a className={`btn ${styles.downloadButton}`} style={{ display: 'flex', backgroundColor: 'inherit', boxShadow: 'none', fontSize: 20, border: 'solid 0px white', padding: 2 }}>\n                        <FontAwesomeIcon icon={faDownload} style={{ height: 20 }} />\n                      </a>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n}\n",{"ruleId":"14","severity":1,"message":"15","line":55,"column":11,"nodeType":"16","endLine":55,"endColumn":55},"jsx-a11y/alt-text","Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]